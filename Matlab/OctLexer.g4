lexer grammar OctLexer;

options { superClass=LexBase; }
channels { COMMENT_CHANNEL }

LP : '(';
RP : ')';
LB :'[';
RB : ']';
LC : '{';
RC : '}';
COLON : ':';
COMMA : ',';
DOT : '.';
AT : '@';
PLUS : '+';
MINUS : '-';
SQUIGGLE : '~';
STAR : '*';
SL : '/';
BSL : '\\';
UP : '^';
GT : '>';
LT : '<';
AMP : '&';
P : '|';
EQ : '=';
SEMI : ';';
EPLUS : '.+' ;
EMINUS : '.-' ;
EMUL : '.*' ;
EDIV : './' ;
ELEFTDIV : '.\\' ;
EPOW : ('.^' | '.**') ;
BREAK : 'break' ;
RETURN : 'return' ;
FUNCTION : 'function' ;
FOR : 'for' ;
WHILE : 'while' ;
END : 'end' ;
GLOBAL : 'global' ;
IF : 'if' ;
CLEAR : 'clear' ;
ELSE : 'else' ;
ELSEIF : 'elseif' ;
EXPR_LE : '<=' ;
EXPR_GE : '>=' ;
EXPR_EQ : '==' ;
EXPR_NE : '~=' ;
TRANSPOSE : 'transpose' ;
NCTRANSPOSE : '.\'' ;
STRING_LITERAL : '\'' ( ~ '\'' | '\'\'' ) * '\'' ;
NAME : [a-zA-Z] [a-zA-Z0-9_]* ;
CONSTANT : NUMBER (E SIGN? NUMBER)? ;
COMMENT : (LineComment | BlockComment) -> channel(COMMENT_CHANNEL) ;
fragment LineComment : ('#' |'%') ~ [\r\n]* ;
fragment BlockComment : '#{' .*? ('#}' | EOF) | '%{' .*? ('%}' | EOF) ;
fragment NUMBER : ('0' .. '9') + ('.' ('0' .. '9') +)? ;
fragment E : 'E' | 'e' ;
fragment SIGN : ('+' | '-') ;
CR : [\r\n] + ;
WS : [ \t] + -> skip ;
