// Combined Antlr4 grammar generated by Antlrvsix.
// Input grammar: C:\Users\kenne\Documents\pl1\pl1-parser.y
// Date: 7/6/2020 2:43:11 PM

grammar pl1_parser;

pl1pgm  : pl1stmtlist
  |
  ;
pl1stmtlist  : pl1stmt ';'
  | pl1stmtlist pl1stmt ';'
  ;
preconditioncommalist  : precondition
  | preconditioncommalist ',' precondition
  ;
prestmtlist  : varnamequal
  | '(' preconditioncommalist ')'
  | prestmtlist ':' varnamequal
  | prestmtlist ':' '(' preconditioncommalist ')'
  ;
pl1stmt  : stmt
  | prestmtlist ':' stmt
  | stmtscope
  | prestmtlist ':' stmtscope
  | stmtscopeend
  | prestmtlist ':' stmtscopeend
//  | UNKNOWN
  ;
stmtscopeend  : endstmt
  ;
stmtscope  : beginstmt
  | dostmt
  | entrystmt
  | packagestmt
  | procedurestmt
  | selectstmt
  ;
stmt  :
  | allocatestmt
  | assignstmt
  | attachstmt
  | callstmt
  | closestmt
  | dclstmt
  | defaultstmt
  | definealiasstmt
  | defineordinalstmt
  | definestructurestmt
  | delaystmt
  | deletestmt
  | detachstmt
  | displaystmt
  | elsestmt
  | exitstmt
  | fetchstmt
  | flushstmt
  | formatstmt
  | freestmt
  | getstmt
  | gotostmt
  | ifstmt
  | iteratestmt
  | leavestmt
  | locatestmt
  | onstmt
  | openstmt
  | otherwisestmt
  | putstmt
  | readstmt
  | releasestmt
  | resignalstmt
  | returnstmt
  | revertstmt
  | rewritestmt
  | signalstmt
  | stopstmt
  | waitstmt
  | whenstmt
  | writestmt
  | unlockstmt
  ;
allocatestmt  : ALLOCATE allocateoptionlist
  ;
allocateoptionlist  : allocateoption
  | allocateoptionlist ',' allocateoption
  ;
allocateoption  : varnameref
  | varnameref IN '(' varnameref ')'
  | varnameref SET '(' varnameref ')'
  | varnameref IN '(' varnameref ')' SET '(' varnameref ')'
  | varnameref SET '(' varnameref ')' IN '(' varnameref ')'
  | NUM varnameref
  | varnameref ctloptionlist
  | NUM varnameref ctloptionlist
  ;
attachstmt  : ATTACH varnameref
  | ATTACH varnameref THREAD '(' varnameref ')'
  | ATTACH varnameref THREAD '(' varnameref ')' ENVIRONMENT '(' ')'
  | ATTACH varnameref THREAD '(' varnameref ')' ENVIRONMENT '(' TSTACK '(' expr ')' ')'
  | ATTACH varnameref ENVIRONMENT '(' ')'
  | ATTACH varnameref ENVIRONMENT '(' TSTACK '(' expr ')' ')'
  | ATTACH varnameref ENVIRONMENT '(' ')' THREAD '(' varnameref ')'
  | ATTACH varnameref ENVIRONMENT '(' TSTACK '(' expr ')' ')' THREAD '(' varnameref ')'
  ;
ctloptionlist  : ctlvarattribute
  | ctlvarattribute dclinit
  | dclinit
  ;
ctlvarattribute  : CHARACTER '(' expr ')'
  | BIT '(' expr ')'
  | GRAPHIC '(' expr ')'
  | AREA '(' expr ')'
  ;
beginstmt  : BEGIN_
  | BEGIN_ OPTIONS '(' beginstmtoptionlist ')'
  ;
beginstmtoptionlist  : beginstmtoption
  | beginstmtoptionlist beginstmtoption
  | beginstmtoptionlist ',' beginstmtoption
  ;
beginstmtoption  : ORDER
  | REORDER
  | NOCHARGRAPHIC
  | CHARGRAPHIC
  | NOINLINE
  | INLINE
  | NON_QUICK
  | NO_QUICK_BLOCKS
  | SUPPORT
  ;
delaystmt  : DELAY '(' expr ')'
  ;
callstmt  : CALL calloptionlist
  ;
closestmt  : CLOSE closegrouplist
  ;
defaultstmt  : DEFAULT defaultitemcommalist
  | DEFAULT NONE
  ;
definealiasstmt  : DEFINE ALIAS varname dcloptionlist
  ;
defineordinalstmt  : DEFINE ORDINAL varname '(' ordinalmembercommalist ')'
  | DEFINE ORDINAL varname '(' ordinalmembercommalist ')' ordinaloptionlist
  ;
definestructurestmt  : DEFINE STRUCTURE dclstructurecommalist
  ;
dclstructurecommalist  : dclstructure
  | dclstructurecommalist ',' dclstructure
  ;
dclstructure  : NUM varname
  | NUM varname CELL
  | NUM varname UNION
  | NUM varname dclfactor
  | NUM '*'
  | NUM '*' CELL
  | NUM '*' UNION
  | NUM '*' dclfactor
  ;
ordinalmembercommalist  : ordinalmember
  | ordinalmembercommalist ',' ordinalmember
  ;
ordinalmember  : varname
  | varname VALUE '(' NUM ')'
  ;
ordinaloptionlist  : ordinaloption
  | ordinaloptionlist ordinaloption
  ;
ordinaloption  : PRECISION '(' NUM ')'
  | SIGNED
  | UNSIGNED
  ;
displaystmt  : DISPLAY '(' expr ')'
  | DISPLAY '(' expr ')' REPLY '(' varnameref ')'
  | DISPLAY '(' expr ')' REPLY '(' varnameref ')' EVENT '(' varnameref ')'
  | DISPLAY '(' expr ')' EVENT '(' varnameref ')' REPLY '(' varnameref ')'
  ;
deletestmt  : DELETE deleteoptionlist
  ;
detachstmt  : DETACH THREAD '(' varnameref ')'
  ;
elsestmt  : ELSE pl1stmt
  ;
endstmt  : END
  | END varname
  ;
entrystmt  : ENTRY entrygrouplist
  | ENTRY
  ;
exitstmt  : EXIT
  ;
fetchstmt  : FETCH fetchoptioncommalist
  ;
fetchoptioncommalist  : fetchoption
  | fetchoptioncommalist ',' fetchoption
  ;
fetchoption  : varnameref
  | varnameref SET '(' varnameref ')'
  | varnameref TITLE '(' expr ')'
  | varnameref SET '(' varnameref ')' TITLE '(' expr ')'
  | varnameref TITLE '(' expr ')' SET '(' varnameref ')'
  ;
flushstmt  : FLUSH FILE_ '(' varnameref ')'
  | FLUSH FILE_ '(' '*' ')'
  ;
formatstmt  : FORMAT formatgrouplist
  ;
freestmt  : FREE freeoption
  ;
freeoption  : varnameref
  | varnameref IN '(' varnameref ')'
  | freeoption ',' varnameref
  | freeoption ',' varnameref IN '(' varnameref ')'
  ;
getstmt  : GET getoptionlist
  | GET '(' varnamedimensioncommalist ')'
  | GET '(' varnamedimensioncommalist ')' getoptionlist
  ;
gotostmt  : GO TO varnameref
  | GOTO varnameref
  ;
iteratestmt  : ITERATE
  | ITERATE varnameref
  ;
leavestmt  : LEAVE
  | LEAVE varnameref
  ;
locatestmt  : LOCATE varnameref locateoptionlist
  ;
onstmt  : ON onconditioncommalist SYSTEM
  | ON onconditioncommalist SNAP SYSTEM
  | ON onconditioncommalist SNAP pl1stmt
  | ON onconditioncommalist pl1stmt
  ;
openstmt  : OPEN opengrouplist
  ;
packagestmt  : PACKAGE
  | PACKAGE packagegrouplist
  ;
packagegrouplist  : packagegroup
  | packagegrouplist packagegroup
  ;
packagegroup  : EXPORTS '(' '*' ')'
  | EXPORTS '(' packagevarnamecommalist ')'
  | RESERVES '(' '*' ')'
  | RESERVES '(' varnamecommalist ')'
  | OPTIONS '(' ')'
  | OPTIONS '(' packageoptionlist ')'
  ;
packagevarnamecommalist  : packagevarname
  | packagevarnamecommalist ',' packagevarname
  ;
packagevarname  : varname
  | varname EXTERNAL '(' STR_CONSTANT ')'
  ;
packageoptionlist  : packageoption
  | packageoptionlist packageoption
  | packageoptionlist ',' packageoption
  ;
packageoption  : NOCHARGRAPHIC
  | CHARGRAPHIC
  | ORDER
  | REORDER
  | REENTRANT
  ;
putstmt  : PUT putoptionlist
  | PUT '(' varnamedimensioncommalist ')'
  | PUT '(' varnamedimensioncommalist ')' putoptionlist
  ;
procedurestmt  : PROCEDURE procgrouplist
  | PROCEDURE
  ;
readstmt  : READ readoptionlist
  ;
releasestmt  : RELEASE varnamecommalist
  | RELEASE '*'
  ;
resignalstmt  : RESIGNAL
  ;
returnstmt  : RETURN
  | RETURN '(' expr ')'
  ;
rewritestmt  : REWRITE rewriteoptionlist
  ;
revertstmt  : REVERT onconditioncommalist
  ;
signalstmt  : SIGNAL oncondition
  ;
stopstmt  : STOP
  ;
unlockstmt  : UNLOCK unlockoptionlist
  ;
waitstmt  : WAIT '(' varnamedimensioncommalist ')'
  | WAIT '(' varnamedimensioncommalist ')' '(' expr ')'
  | WAIT THREAD '(' varnameref ')'
  ;
writestmt  : WRITE writeoptionlist
  ;
readoptionlist  : readoption
  | readoptionlist readoption
  ;
rewriteoptionlist  : rewriteoption
  | rewriteoptionlist rewriteoption
  ;
selectstmt  : SELECT
  | SELECT '(' expr ')'
  ;
whenstmt  : WHEN '(' varnamedimensioncommalist ')' pl1stmt
  ;
otherwisestmt  : OTHERWISE pl1stmt
  ;
writeoptionlist  : writeoption
  | writeoptionlist writeoption
  ;
deleteoptionlist  : deleteoption
  | deleteoptionlist deleteoption
  ;
unlockoptionlist  : unlockoption
  | unlockoptionlist unlockoption
  ;
locateoptionlist  : locateoption
  | locateoptionlist locateoption
  ;
calloptionlist  : varnameref
  | varnameref callmultitaskoptionlist
  ;
callmultitaskoptionlist  : callmultitaskoption
  | callmultitaskoptionlist callmultitaskoption
  ;
callmultitaskoption  : TASK
  | TASK '(' varnameref ')'
  | EVENT '(' varnameref ')'
  | PRIORITY '(' varnameref ')'
  ;
closegrouplist  : closegroup
  | closegrouplist ',' closegroup
  ;
defaultitemcommalist  : defaultitem
  | defaultitemcommalist ',' defaultitem
  ;
defaultitem  : defaultpredicateexpr
  | defaultpredicateexpr dcloptionlist
  | defaultpredicateexpr dcloptionlist VALUE '(' dcloptionlist ')'
  | '(' defaultitemcommalist ')'
  | '(' defaultitemcommalist ')' dcloptionlist
  | '(' defaultitemcommalist ')' dcloptionlist VALUE '(' dcloptionlist ')'
  | '(' defaultitemcommalist ')' ERROR
  ;
defaultrangespec  : varname
  | varname ':' varname
  | defaultrangespec ',' varname
  | defaultrangespec ',' varname ':' varname
  ;
defaultpredicateexpr  : defaultpredicateexpr AND defaultpredicateexpr
  | defaultpredicateexpr OR defaultpredicateexpr
  | NOT defaultpredicateexpr
  | '(' defaultpredicateexpr ')'
  | RANGE '(' '*' ')'
  | RANGE '(' defaultrangespec ')'
  | DESCRIPTORS
  | dcloption
  ;
procgrouplist  : procgroup
  | procgrouplist procgroup
  ;
entrygrouplist  : entrygroup
  | entrygrouplist entrygroup
  ;
formatgrouplist  : '(' editformatlist ')'
  ;
iooption  : FILE_ '(' varnameref ')'
  | EVENT '(' varnameref ')'
  ;
readoption  : INTO '(' varnameref ')'
  | SET '(' varnameref ')'
  | IGNORE '(' expr ')'
  | KEY '(' expr ')'
  | KEYTO '(' varnameref ')'
  | NOLOCK
  | iooption
  ;
writeoption  : FROM '(' varnameref ')'
  | KEYFROM '(' expr ')'
  | KEYTO '(' varnameref ')'
  | iooption
  ;
rewriteoption  : FROM '(' varnameref ')'
  | KEY '(' expr ')'
  | iooption
  ;
deleteoption  : KEY '(' expr ')'
  | iooption
  ;
unlockoption  : FILE_ '(' varnameref ')'
  | KEY '(' expr ')'
  ;
locateoption  : FILE_ '(' varnameref ')'
  | SET '(' varnameref ')'
  | KEYFROM '(' expr ')'
  ;
opengrouplist  : opengroup
  | opengrouplist ',' opengroup
  ;
opengroup  : FILE_ '(' varnameref ')' openoptionlist
  | FILE_ '(' varnameref ')'
  ;
openoptionlist  : openoption
  | openoptionlist openoption
  ;
openoption  : STREAM
  | RECORD
  | INPUT
  | OUTPUT
  | UPDATE
  | DIRECT
  | SEQUENTIAL
  | TRANSIENT
  | BUFFERED
  | UNBUFFERED
  | BACKWARDS
  | EXCLUSIVE
  | KEYED
  | PRINT
  | TITLE '(' expr ')'
  | LINESIZE '(' expr ')'
  | PAGESIZE '(' expr ')'
  | ENVIRONMENT '(' environmentspeclist ')'
  ;
closegroup  : FILE_ '(' varnameref ')' ENVIRONMENT '(' LEAVE ')'
  | FILE_ '(' varnameref ')' ENVIRONMENT '(' REREAD ')'
  | FILE_ '(' varnameref ')'
  ;
putoptionlist  : putoption
  | putoptionlist putoption
  ;
putoption  : FILE_ '(' varnameref ')'
  | PAGE
  | SKIP_
  | SKIP_ '(' expr ')'
  | LINE '(' expr ')'
  | STRING '(' varnameref ')'
  | dataspecification
  ;
entrygroup  : '(' varnamecommalist ')'
  | RETURNS '(' entryparmcommalist ')'
  | REDUCIBLE
  | IRREDUCIBLE
  | OPTIONS '(' procoptionlist ')'
  | '(' ')'
  ;
procgroup  : '(' varnamecommalist ')'
  | RETURNS '(' entryparmcommalist ')'
  | OPTIONS '(' procoptionlist ')'
  | REDUCIBLE
  | IRREDUCIBLE
  | RECURSIVE
  | ORDER
  | REORDER
  | CHARGRAPHIC
  | NOCHARGRAPHIC
  | '(' ')'
  ;
procoptionlist  : procoption
  | procoptionlist procoption
  | procoptionlist ',' procoption
  ;
procoption  : MAIN
  | REENTRANT
  | NOEXECOPS
  | TASK
  | VARIABLE
  | NON_QUICK
  | NO_QUICK_BLOCKS
  | PACKED_DECIMAL
  | SEPARATE_STATIC
  | SUPPORT
  | RENAME '(' renamepaircommalist ')'
  | VALIDATE
  | VALIDATE '(' varname ')'
  ;
renamepaircommalist  : renamepair
  | renamepaircommalist ',' renamepair
  ;
renamepair  : '(' varname ',' varname ')'
  ;
getoptionlist  : getoption
  | getoptionlist getoption
  ;
getoption  : FILE_ '(' varnameref ')'
  | COPY '(' varnameref ')'
  | PAGE
  | SKIP_
  | SKIP_ '(' expr ')'
  | STRING '(' expr ')'
  | dataspecification
  ;
dataspecification  : LIST listdataspec
  | DATA datadataspec
  | DATA
  | EDIT editdataspec
  ;
listdataspec  : '(' datalist ')'
  ;
datadataspec  : '(' datalist ')'
  ;
editdataspec  : '(' datalist ')' '(' editformatlist ')'
  | editdataspec '(' datalist ')' '(' editformatlist ')'
  ;
editformatexpr  : A
  | A '(' expr ')'
  | B
  | B '(' expr ')'
  | C '(' realformatexpr ')'
  | C '(' realformatexpr ',' realformatexpr ')'
  | realformatexpr
  | G
  | G '(' expr ')'
  | P STR_CONSTANT
  | R '(' varnameref ')'
  | X '(' expr ')'
  | LINE '(' expr ')'
  | COLUMN '(' expr ')'
  | PAGE
  | SKIP_
  | SKIP_ '(' expr ')'
  ;
realformatexpr  : E '(' expr ')'
  | E '(' expr ',' expr ')'
  | E '(' expr ',' expr ',' expr ')'
  | F '(' expr ')'
  | F '(' expr ',' expr ')'
  | F '(' expr ',' expr ',' expr ')'
  ;
editformatitem  : editformatexpr
  | NUM editformatexpr
  | '(' NUM ')' editformatexpr
  ;
editformatlist  : editformatitem
  | NUM '(' editformatlist ')'
  | '(' NUM ')' '(' editformatlist ')'
  | editformatlist ',' editformatitem
  | editformatlist ',' NUM '(' editformatlist ')'
  | editformatlist ',' '(' NUM ')' '(' editformatlist ')'
  ;
datalist  : expr
  | '(' datalist do_type_3 ')'
  | datalist ',' expr
  | datalist ',' '(' datalist do_type_3 ')'
  ;
dostmt  : do_type_1
  | do_type_2
  | do_type_3
  ;
do_type_1  : DO
  ;
do_type_2  : DO do_spec_2
  ;
do_spec_2  : WHILE '(' expr ')'
  | WHILE '(' expr ')' UNTIL '(' expr ')'
  | UNTIL '(' expr ')'
  | UNTIL '(' expr ')' WHILE '(' expr ')'
  | LOOP
  | FOREVER
  ;
do_type_3  : DO varnameref '=' do_spec_3list
  ;
do_spec_3list  : do_spec_3
  | do_spec_3 do_spec_2
  | do_spec_3list ',' do_spec_3
  | do_spec_3list ',' do_spec_3 do_spec_2
  ;
do_spec_3  : expr
  | expr do_spec_3_exprlist
  ;
do_spec_3_exprlist  : do_spec_3_expr
  | do_spec_3_exprlist do_spec_3_expr
  ;
do_spec_3_expr  : TO expr
  | BY expr
  | REPEAT expr
  | UPTHRU expr
  | DOWNTHRU expr
  ;
ifstmt  : ifprestmt THEN pl1stmt
  ;
ifprestmt  : IF expr
  | IF '(' expr ')' '=' expr
  ;
assignstmt  : (
		varnamerefcommalist '=' expr
		  | varnamerefcommalist '=' expr ',' BY NAME
		  | IF '(' expr ')' '=' expr
		  | IF '(' expr ')' '=' expr ',' BY NAME
	  ) | (
		varnamerefcommalist SELFOP expr
		  | varnamerefcommalist SELFOP expr ',' BY NAME
		  | IF '(' expr ')' SELFOP expr
		  | IF '(' expr ')' SELFOP expr ',' BY NAME
	)
 ;

expr :
  varnameref expr1
  | exprconst expr1
  | '-' expr expr1
  | '+' expr expr1
  | NOT expr expr1
  | '(' expr ')' expr1
  | '(' expr ')' exprstrconst expr1
  ;
exprbase  :
  expr '+' expr
  | expr '-' expr
  | expr '*' expr
  | expr '/' expr
  | expr AND expr
  | expr OR expr
  | expr CONCAT expr
  | expr POWER expr
  | expr '=' expr
  | expr '<' expr
  | expr '>' expr
  | expr LE expr
  | expr GE expr
  | expr NE expr
  | varnameref
  | exprconst
  | '-' expr
  | '+' expr
  | NOT expr
  ;
expr1 :
  '+' expr expr1
  | '-' expr expr1
  | '*' expr expr1
  | '/' expr expr1
  | AND expr expr1
  | OR expr expr1
  | CONCAT expr expr1
  | POWER expr expr1
  | '=' expr expr1
  | '<' expr expr1
  | '>' expr expr1
  | LE expr expr1
  | GE expr expr1
  | NE expr expr1
  |
  ;

exprconst  : exprnumconst
  | exprstrconst
  ;
exprstrconst  : STR_CONSTANT
  | STR_CONSTANT B
  | STR_CONSTANT B1
  | STR_CONSTANT B2
  | STR_CONSTANT B3
  | STR_CONSTANT B4
  | STR_CONSTANT BX
  | STR_CONSTANT G
  | STR_CONSTANT GX
  | STR_CONSTANT M
  | STR_CONSTANT WX
  | STR_CONSTANT X
  | STR_CONSTANT XN
  | STR_CONSTANT XU
  ;
exprnumconst  : (
		NUM
		  | NUM I
		  | NUMFLOAT
		  | NUMFLOAT I
		  ) | (
			NUM B
			  | NUM B I
			  | NUM B1
			  | NUM B1 I
			  | NUM B2
			  | NUM B2 I
			  | NUM B3
			  | NUM B3 I
			  | NUM B4
			  | NUM B4 I
			  | NUMFLOAT B
			  | NUMFLOAT B I
			  | NUMFLOAT B1
			  | NUMFLOAT B1 I
			  | NUMFLOAT B2
			  | NUMFLOAT B2 I
			  | NUMFLOAT B3
			  | NUMFLOAT B3 I
			  | NUMFLOAT B4
			  | NUMFLOAT B4 I
			  )
  ;
varnamerefcommalist  : varnameref
  | varnamerefcommalist ',' varnameref
  ;
varnameref  : varnamequal
  | varnameref '.' varnamequal
  | varnameref PTR varnamequal
  | varnameref HANDLEPTR varnamequal
  ;
varnamequal  : (
					varname
					  | varname '(' varnamedimensioncommalist ')'
					  | varname '(' varnamedimensioncommalist ')' '(' varnamedimensioncommalist ')'
					  | varname '(' ')'
					  | varname '(' varnamedimensioncommalist ')' '(' ')'
					  )
				| (
				DELAY '(' '*' ',' varnamedimensioncommalist ')'
				  | DELAY '(' '*' ')'
				  | DELAY '(' expr ',' varnamedimensioncommalist ')'
				  | DELAY '(' expr ')'
				  | DISPLAY '(' '*' ',' varnamedimensioncommalist ')'
				  | DISPLAY '(' '*' ')'
				  | DISPLAY '(' expr ',' varnamedimensioncommalist ')'
				  | DISPLAY '(' expr ')'
				  | GET '(' varnamedimensioncommalist ')'
				  | IF '(' '*' ',' varnamedimensioncommalist ')'
				  | IF '(' '*' ')'
				  | IF '(' expr ',' varnamedimensioncommalist ')'
				  | IF '(' expr ')'
				  | PUT '(' varnamedimensioncommalist ')'
				  | RETURN '(' '*' ',' varnamedimensioncommalist ')'
				  | RETURN '(' '*' ')'
				  | RETURN '(' expr ',' varnamedimensioncommalist ')'
				  | RETURN '(' expr ')'
				  | SELECT '(' '*' ',' varnamedimensioncommalist ')'
				  | SELECT '(' '*' ')'
				  | SELECT '(' expr ',' varnamedimensioncommalist ')'
				  | SELECT '(' expr ')'
				  | UNTIL '(' '*' ')'
				  | UNTIL '(' '*' ',' varnamedimensioncommalist ')'
				  | UNTIL '(' expr ',' varnamedimensioncommalist ')'
				  | UNTIL '(' expr ')'
				  | WHEN '(' varnamedimensioncommalist ')'
				  | WAIT '(' varnamedimensioncommalist ')'
				  | WHILE '(' '*' ')'
				  | WHILE '(' '*' ',' varnamedimensioncommalist ')'
				  | WHILE '(' expr ',' varnamedimensioncommalist ')'
				  | WHILE '(' expr ')'
				  )
  ;
varnamedimensioncommalist  : varnamedimension
  | varnamedimensioncommalist ',' varnamedimension
  | varnamedimensioncommalist ':' varnamedimension
  ;
varnamedimension  : expr
  | '*'
  | NUM SUB
  ;
varnamecommalist  : varname
  | varnamecommalist ',' varname
  ;
varname  : VARNAME
  | varname_kw
  | varname_kwpp
  | varname_conditions
  ;
varname_kw  : A
  | ABNORMAL
  | ADDBUFF
  | ALIAS
  | ALIGNED
  | ALLOCATE
  | ASCII
  | ASSIGNABLE
  | ASSEMBLER
  | ATTACH
  | AUTOMATIC
  | B
  | B1
  | B2
  | B3
  | B4
  | BACKWARDS
  | BASED
  | BEGIN_
  | BIGENDIAN
  | BINARY
  | BIT
  | BKWD
  | BLKSIZE
  | BUFFERED
  | BUFFERS
  | BUFFOFF
  | BUFND
  | BUFNI
  | BUFSP
  | BUILTIN
  | BY
  | BYADDR
  | BYVALUE
  | BX
  | C
  | CALL
  | CELL
  | CDECL
  | CHARACTER
  | CHARGRAPHIC
  | CLOSE
  | COBOL
  | COLUMN
  | COMPLEX
  | CONNECTED
  | CONSECUTIVE
  | CONSTANT
  | CONTROLLED
  | COPY
  | CTLASA
  | CTL360
  | D
  | DATA
  | DATE
  | DB
  | DECIMAL
  | DEFINE
  | DEFINED
  | DELAY
  | DELETE
  | DESCRIPTOR
  | DESCRIPTORS
  | DETACH
  | DIMENSION
  | DISPLAY
  | DIRECT
  | DO
  | DOWNTHRU
  | E
  | EDIT
  | ELSE
  | END
  | ENTRY
  | ENVIRONMENT
  | EVENT
  | EXCLUSIVE
  | EXPORTS
  | EXTERNAL
  | EXIT
  | F
  | FB
  | FS
  | FBS
  | FETCH
  | FETCHABLE
  | FILE_
  | FIXED
  | FLOAT
  | FLUSH
  | FOREVER
  | FORMAT
  | FORTRAN
  | FREE
  | FROM
  | FROMALIEN
  | G
  | GENERIC
  | GENKEY
  | GET
  | GO
  | GOTO
  | GRAPHIC
  | GX
  | HANDLE
  | HEXADEC
  | I
  | IEEE
  | IF
  | IGNORE
  | IMPORTED
  | IN
  | INDEXAREA
  | INDEXED
  | INITIAL_
  | INLINE
  | INPUT
  | INTER
  | INTERACTIVE
  | INTERNAL
  | INTO
  | IRREDUCIBLE
  | ITERATE
  | KEYED
  | KEYLENGTH
  | KEYLOC
  | KEYTO
  | KEYFROM
  | LABEL
  | LEAVE
  | LIKE
  | LIMITED
  | LINE
  | LINESIZE
  | LINKAGE
  | LIST
  | LITTLEENDIAN
  | LOCAL
  | LOCATE
  | LOOP
  | M
  | MAIN
  | NCP
  | NOCHARGRAPHIC
  | NOCHECK
  | NOCONVERSION
  | NODESCRIPTOR
  | NOEXECOPS
  | NOFIXEDOVERFLOW
  | NOINIT
  | NOINLINE
  | NOINVALIDOP
  | NOLOCK
  | NONASSIGNABLE
  | NONCONNECTED
  | NONE
  | NONVARYING
  | NON_QUICK
  | NO_QUICK_BLOCKS
  | NOOVERFLOW
  | NORMAL
  | NOSIZE
  | NOSUBSCRIPTRANGE
  | NOSTRINGRANGE
  | NOSTRINGSIZE
  | NOUNDERFLOW
  | NOWRITE
  | NOZERODIVIDE
  | OFFSET
  | ON
  | OPEN
  | OPTIONAL
  | OPTIONS
  | OPTLINK
  | ORDER
  | ORDINAL
  | OUTPUT
  | P
  | PACKAGE
  | PACKED
  | PACKED_DECIMAL
  | PAGE
  | PAGESIZE
  | PARAMETER
  | PASSWORD
  | PICTURE
  | POINTER
  | POSITION
  | PRECISION
  | PRINT
  | PRIORITY
  | PUT
  | R
  | RANGE
  | REAL
  | READ
  | RECSIZE
  | RECURSIVE
  | REENTRANT
  | REDUCIBLE
  | REFER
  | REGIONAL
  | RELEASE
  | RENAME
  | REORDER
  | REPEAT
  | REPLY
  | REREAD
  | RESERVED
  | RESERVES
  | RESIGNAL
  | RETCODE
  | RETURN
  | RETURNS
  | REUSE
  | REVERT
  | REWRITE
  | SCALARVARYING
  | SELECT
  | SEPARATE_STATIC
  | SEQUENTIAL
  | SET
  | SIGNAL
  | SIGNED
  | SIS
  | SKIP_
  | STATIC
  | STDCALL
  | STOP
  | STREAM
  | STRING
  | STRINGVALUE
  | STRUCTURE
  | SUB
  | SUPPORT
  | SYSTEM
  | TASK
  | THEN
  | THREAD
  | TITLE
  | TO
  | TOTAL
  | TP
  | TRANSIENT
  | TRKOFL
  | TSTACK
  | TYPE
  | U
  | UNALIGNED
  | UNBUFFERED
  | UNCONNECTED
  | UNDEFINEDFILE
  | UNION
  | UNLOCK
  | UNSIGNED
  | UNTIL
  | UPDATE
  | UPTHRU
  | V
  | VALIDATE
  | VALUE
  | VARIABLE
  | VARYING
  | VARYINGZ
  | VB
  | VBS
  | VS
  | VSAM
  | WAIT
  | WHEN
  | WHILE
  | WIDECHAR
  | WINMAIN
  | WRITE
  | WX
  | X
  | XN
  | XU
  ;
varname_kwpp  : ACTIVATE
  | DEACTIVATE
  | INCLUDE
  | NOPRINT
  | NOTE
  | PAGE
  | REPLACE
  ;
varname_conditions  : ANYCONDITION
  | AREA
  | ATTENTION
  | CHECK
  | CONDITION
  | CONVERSION
  | ENDFILE
  | ENDPAGE
  | ERROR
  | FINISH
  | FIXEDOVERFLOW
  | INVALIDOP
  | KEY
  | NAME
  | OVERFLOW_
  | PENDING
  | RECORD
  | SIZE
  | STORAGE
  | STRINGRANGE
  | STRINGSIZE
  | SUBSCRIPTRANGE
  | TRANSMIT
  | UNDERFLOW_
  | ZERODIVIDE
  ;
onconditioncommalist  : oncondition
  | onconditioncommalist ',' oncondition
  ;
oncondition  : AREA
  | ATTENTION
  | ANYCONDITION
  | CHECK
  | CHECK '(' varnamerefcommalist ')'
  | CONDITION '(' varnameref ')'
  | CONVERSION
  | ENDFILE '(' varnameref ')'
  | ENDPAGE '(' varnameref ')'
  | ERROR
  | FINISH
  | FIXEDOVERFLOW
  | INVALIDOP
  | KEY '(' varnameref ')'
  | NAME '(' varnameref ')'
  | OVERFLOW_
  | PENDING '(' varnameref ')'
  | RECORD '(' varnameref ')'
  | SIZE
  | STORAGE
  | STRINGRANGE
  | STRINGSIZE
  | SUBSCRIPTRANGE
  | TRANSMIT '(' varnameref ')'
  | UNDEFINEDFILE '(' varnameref ')'
  | UNDERFLOW_
  | ZERODIVIDE
  | VARNAME
  | varname_kw
  ;
precondition  : CHECK
  | CHECK '(' varnamerefcommalist ')'
  | CONVERSION
  | FIXEDOVERFLOW
  | INVALIDOP
  | OVERFLOW_
  | SIZE
  | STRINGRANGE
  | STRINGSIZE
  | SUBSCRIPTRANGE
  | UNDERFLOW_
  | ZERODIVIDE
  | NOCHECK
  | NOCONVERSION
  | NOFIXEDOVERFLOW
  | NOINVALIDOP
  | NOOVERFLOW
  | NOSIZE
  | NOSUBSCRIPTRANGE
  | NOSTRINGRANGE
  | NOSTRINGSIZE
  | NOUNDERFLOW
  | NOZERODIVIDE
  ;
dclstmt  : DECLARE dcltermcommalist
  | DECLARE
  ;
dcltermcommalist  : dclterm
  | dclnamebase
  | dcltermcommalist ',' dclterm
  | dcltermcommalist ',' dclnamebase
  ;
dclterm  : '(' dcltermcommalist ')'
  | '(' dcltermcommalist ')' dclfactor
  | NUM '(' dcltermcommalist ')'
  | NUM '(' dcltermcommalist ')' dclfactor
  | NUM '(' dcltermcommalist ')' CELL
  | NUM '(' dcltermcommalist ')' UNION
  ;
dclnamebase  : varname
  | varname dclfactor
  | NUM varname
  | NUM varname dclfactor
  | NUM varname CELL
  | NUM varname UNION
  | NUM '*'
  | NUM '*' dclfactor
  | NUM '*' CELL
  | NUM '*' UNION
  ;
dclfactor  : '(' dclarrayboundcommalist ')'
  | '(' dclarrayboundcommalist ')' dcloptionlist
  | dcloptionlist
  ;
dclarrayboundcommalist  : dclarraybound
  | dclarraybound ':' dclarraybound
  | dclarrayboundcommalist ',' dclarraybound
  | dclarrayboundcommalist ',' dclarraybound ':' dclarraybound
  ;
dclarraybound  : expr
  | expr REFER '(' varnameref ')'
  | '*'
  ;
dcloptionlist  : dcloption
  | dcloptionlist dcloption
  ;
dcloption  : dclnumeric
  | dclio
  | dclchar
  | dclstg
  | dclpgm
  | dclmisc
  | dclinit
  ;
dclnumeric  : FIXED
  | FIXED '(' dclnumericNUM ')'
  | FIXED '(' dclnumericNUM ',' dclnumericNUM ')'
  | FLOAT
  | FLOAT '(' dclnumericNUM ')'
  | DECIMAL
  | DECIMAL '(' dclnumericNUM ')'
  | DECIMAL '(' dclnumericNUM ',' dclnumericNUM ')'
  | BINARY
  | BINARY '(' dclnumericNUM ')'
  | BINARY '(' dclnumericNUM ',' dclnumericNUM ')'
  | REAL
  | COMPLEX
  | COMPLEX '(' dclnumericNUM ')'
  | PRECISION
  | PRECISION '(' dclnumericNUM ')'
  | PRECISION '(' dclnumericNUM ':' dclnumericNUM ')'
  | PRECISION '(' dclnumericNUM ',' dclnumericNUM ')'
  ;
dclnumericNUM  : NUM
  | '-' NUM
  | '+' NUM
  ;
dclio  : BACKWARDS
  | BUFFERED
  | DIRECT
  | ENVIRONMENT '(' environmentspeclist ')'
  | EXCLUSIVE
  | FILE_
  | INPUT
  | KEYED
  | LINESIZE '(' expr ')'
  | OUTPUT
  | PAGESIZE '(' expr ')'
  | PRINT
  | RECORD
  | SEQUENTIAL
  | STREAM
  | TITLE '(' expr ')'
  | TRANSIENT
  | UNBUFFERED
  | UPDATE
  ;
dclchar  : AREA charspec
  | BIT charspec
  | CHARACTER charspec
  | GRAPHIC charspec
  | G charspec
  | PICTURE STR_CONSTANT
  | WIDECHAR charspec
  | DATE
  | DATE '(' STR_CONSTANT ')'
  ;
dclstg  : ALIGNED
  | AUTOMATIC
  | BASED
  | BASED '(' varnameref ')'
  | BYADDR
  | BYVALUE
  | CONNECTED
  | CONSTANT
  | CONTROLLED
  | DEFINED varnameref
  | DEFINED '(' varnameref ')'
  | DIMENSION '(' dclarrayboundcommalist ')'
  | EXTERNAL
  | EXTERNAL '(' STR_CONSTANT ')'
  | INTERNAL
  | LIKE varnameref
  | LOCAL
  | NONCONNECTED
  | STATIC
  | OFFSET
  | OFFSET '(' varnameref ')'
  | OPTIONAL
  | PARAMETER
  | POSITION '(' expr ')'
  | RESERVED
  | RESERVED '(' IMPORTED ')'
  | UNALIGNED
  | UNCONNECTED
  | STRUCTURE
  ;
dclpgm  : ENTRY
  | ENTRY '(' entryparmcommalist ')'
  | RETURNS '(' entryparmcommalist ')'
  | LABEL
  | CONDITION
  | GENERIC '(' genericspeccommalist ')'
  | TASK
  | LIMITED
  | FROMALIEN
  | FETCHABLE
  | CDECL
  | OPTLINK
  | STDCALL
  | WINMAIN
  | FORTRAN
  | DESCRIPTOR
  | NODESCRIPTOR
  | LINKAGE '(' STR_CONSTANT ')'
  | REDUCIBLE
  | IRREDUCIBLE
  ;
dclmisc  : VARIABLE
  | VARYING
  | NONVARYING
  | VARYINGZ
  | SYSTEM
  | BUILTIN
  | POINTER
  | ABNORMAL
  | NORMAL
  | ASSIGNABLE
  | NONASSIGNABLE
  | HEXADEC
  | IEEE
  | BIGENDIAN
  | LIST
  | LITTLEENDIAN
  | SIGNED
  | UNSIGNED
  | NOINIT
  | HANDLE varnameref
  | HANDLE '(' varnameref ')'
  | TYPE varnameref
  | TYPE '(' varnameref ')'
  | ORDINAL varnameref
  | OPTIONS '(' entryoptionlist ')'
  | FORMAT
  ;
environmentspeclist  : environmentspec
  | environmentspeclist environmentspec
  | environmentspeclist ',' environmentspec
  ;
environmentspec  : F
  | F '(' NUM ')'
  | FB
  | FS
  | FBS
  | V
  | VB
  | VS
  | VBS
  | ADDBUFF
  | ASCII
  | BKWD
  | BLKSIZE '(' environmentspecparm ')'
  | BUFFERS '(' environmentspecparm ')'
  | BUFFOFF '(' environmentspecparm ')'
  | BUFND '(' environmentspecparm ')'
  | BUFNI '(' environmentspecparm ')'
  | BUFSP '(' environmentspecparm ')'
  | COBOL
  | CONSECUTIVE
  | CTLASA
  | CTL360
  | D
  | DB
  | GENKEY
  | INDEXAREA '(' environmentspecparm ')'
  | INDEXED
  | INTERACTIVE
  | KEYLENGTH '(' environmentspecparm ')'
  | KEYLOC '(' environmentspecparm ')'
  | LEAVE
  | NCP '(' environmentspecparm ')'
  | NOWRITE
  | RECSIZE '(' environmentspecparm ')'
  | REGIONAL '(' environmentspecparm ')'
  | REREAD
  | REUSE
  | PASSWORD
  | SCALARVARYING
  | SIS
  | SKIP_
  | STRINGVALUE
  | TOTAL
  | TP '(' M ')'
  | TP '(' R ')'
  | TRKOFL
  | U
  | VSAM
  ;
environmentspecparm  : NUM
  | VARNAME
  ;
entryparmcommalist  : entryparm
  | entryparmcommalist ',' entryparm
  ;
entryparm  :
  | dcloptionlist
  | '*'
  | '*' dcloptionlist
  | NUM dcloptionlist
  | NUM
  | '(' entryarrayspeccommalist ')' dcloptionlist
  | NUM '(' entryarrayspeccommalist ')' dcloptionlist
  | NUM '(' entryarrayspeccommalist ')'
  ;
entryarrayspec  : '*'
  | NUM
  | NUM ':' NUM
  | NUM ':' '*'
  | '*' ':' NUM
  | '*' ':' '*'
  ;
entryarrayspeccommalist  : entryarrayspec
  | entryarrayspeccommalist ',' entryarrayspec
  ;
entryoptionlist  : entryoption
  | entryoptionlist entryoption
  | entryoptionlist ',' entryoption
  ;
entryoption  : ASSEMBLER
  | COBOL
  | FORTRAN
  | INTER
  | RETCODE
  | CONSTANT
  | VARIABLE
  | PACKED
  | SUPPORT
  ;
genericspeccommalist  : genericspec
  | genericspeccommalist ',' genericspec
  ;
genericspec  : varname WHEN '(' genericwhenoptionlist ')'
  ;
genericwhenoptionlist  : genericwhenoption
  | genericwhenoptionlist ',' genericwhenoption
  ;
genericwhenoption  :
  | '*'
  | dcloptionlist
  ;
charspec  :
  | '(' '*' ')'
  | '(' expr ')'
  | '(' expr REFER '(' varnameref ')' ')'
  ;
dclinit  : INITIAL_ '(' inititemcommalist ')'
  | INITIAL_ CALL varnameref
  | INITIAL_ TO '(' initialtospec ')' '(' inititemcommalist ')'
  ;
initialtospec  : VARYING
  | VARYINGZ
  | NONVARYING
  ;
inititemcommalist  : inititem
  | inititemcommalist ',' inititem
  ;
inititem  : exprbase
  | '*'
  | inititerationfactorlist
  | inititerationfactorlist '*'
  | inititerationfactorlist exprbase
  | inititerationfactorlist '(' inititemcommalist ')'
  ;
inititerationfactorlist  : '(' exprbase ')'
  | inititerationfactorlist '(' exprbase ')'
  ;

A               : [aA];
ABNORMAL        : [aA] [bB] [nN] [oO] [rR] [mM] [aA] [lL];
ACTIVATE     : [aA] [cC] [tT] ([iI] [vV] [aA] [tT] [eE])?;
ADDBUFF         : [aA] [dD] [dD] [bB] [uU] [fF] [fF];
ALIAS           : [aA] [lL] [iI] [aA] [sS];
ALIGNED         : [aA] [lL] [iI] [gG] [nN] [eE] [dD];
ALLOCATE     : [aA] [lL] [lL] [oO] [cC] ([aA] [tT] [eE])?;
ANYCONDITION : [aA] [nN] [yY] [cC] [oO] [nN] [dD] ([iI] [tT] [iI] [oO] [nN])?;
AREA            : [aA] [rR] [eE] [aA];
ASCII           : [aA] [sS] [cC] [iI] [iI];
ASSIGNABLE : [aA] [sS] [sS] [iI] [gG] [nN] [aA] [bB] [lL] [eE] | [aA] [sS] [gG] [nN];
ASSEMBLER   : [aA] [sS] [sS] [eE] [mM] [bB] [lL] [eE] [rR] | [aA] [sS] [mM];
ATTACH          : [aA] [tT] [tT] [aA] [cC] [hH];
ATTENTION  : [aA] [tT] [tT] [eE] [nN] [tT] [iI] [oO] [nN] | [aA] [tT] [tT] [nN];
AUTOMATIC    : [aA] [uU] [tT] [oO] ([mM] [aA] [tT] [iI] [cC])?;
B               : [bB];
B1              : [bB] [1];
B2              : [bB] [2];
B3              : [bB] [3];
B4              : [bB] [4];
BACKWARDS       : [bB] [aA] [cC] [kK] [wW] [aA] [rR] [dD] [sS];
BASED           : [bB] [aA] [sS] [eE] [dD];
BEGIN_           : [bB] [eE] [gG] [iI] [nN];
BIGENDIAN       : [bB] [iI] [gG] [eE] [nN] [dD] [iI] [aA] [nN];
BINARY       : [bB] [iI] [nN] ([aA] [rR] [yY])?;
BIT             : [bB] [iI] [tT];
BKWD            : [bB] [kK] [wW] [dD];
BLKSIZE         : [bB] [lL] [kK] [sS] [iI] [zZ] [eE];
BUFFERED     : [bB] [uU] [fF] [fF] [eE] [rR] [eE] [dD] | [bB] [uU] [fF];
BUFFERS      : [bB] [uU] [fF] [fF] [eE] [rR] [sS] | [bB] [uU] [fF] [fF];
BUFFOFF         : [bB] [uU] [fF] [fF] [oO] [fF] [fF];
BUFND           : [bB] [uU] [fF] [nN] [dD];
BUFNI           : [bB] [uU] [fF] [nN] [iI];
BUFSP           : [bB] [uU] [fF] [sS] [pP];
BUILTIN         : [bB] [uU] [iI] [lL] [tT] [iI] [nN];
BY              : [bB] [yY];
BYADDR		: [bB] [yY] [aA] [dD] [dD] [rR];
BYVALUE		: [bB] [yY] [vV] [aA] [lL] [uU] [eE];
BX		: [bB] [xX];
C               : [cC];
CALL            : [cC] [aA] [lL] [lL];
CDECL           : [cC] [dD] [eE] [cC] [lL];
CELL            : [cC] [eE] [lL] [lL];
CHARACTER    : [cC] [hH] [aA] [rR] [aA] [cC] [tT] [eE] [rR] | [cC] [hH] [aA] [rR];
CHARGRAPHIC  : [cC] [hH] [aA] [rR] [gG] [rR] [aA] [pP] [hH] [iI] [cC] | [cC] [hH] [aA] [rR] [gG];
CHECK           : [cC] [hH] [eE] [cC] [kK];
CLOSE           : [cC] [lL] [oO] [sS] [eE];
COBOL           : [cC] [oO] [bB] [oO] [lL];
COLUMN       : [cC] [oO] [lL] [uU] [mM] [nN] | [cC] [oO] [lL];
COMPLEX    : [cC] [oO] [mM] [pP] [lL] [eE] [xX] | [cC] [pP] [lL] [xX];
CONNECTED    : [cC] [oO] [nN] [nN] ([eE] [cC] [tT] [eE] [dD])?;
CONDITION    : [cC] [oO] [nN] [dD] ([iI] [tT] [iI] [oO] [nN])?;
CONSECUTIVE     : [cC] [oO] [nN] [sS] [eE] [cC] [uU] [tT] [iI] [vV] [eE];
CONSTANT     : [cC] [oO] [nN] [sS] [tT] ([aA] [nN] [tT])?;
CTLASA          : [cC] [tT] [lL] [aA] [sS] [aA];
CTL360          : [cC] [tT] [lL] [3] [6] [0];
CONTROLLED  : [cC] [oO] [nN] [tT] [rR] [oO] [lL] [lL] [eE] [dD] | [cC] [tT] [lL];
CONVERSION   : [cC] [oO] [nN] [vV] ([eE] [rR] [sS] [iI] [oO] [nN])?;
COPY            : [cC] [oO] [pP] [yY];
D               : [dD];
DB              : [dD] [bB];
DATA            : [dD] [aA] [tT] [aA];
DATE            : [dD] [aA] [tT] [eE];
DECLARE : [dD] [eE] [cC] [lL] [aA] [rR] [eE] | [dD] [cC] [lL];
    /*
     If we see a 'dcl' inside a preprocessor directory, the
     preprocessor will handle it.

      if(ppCurrentContext->ppGatherTokens)
      {
      	dupyy(DECLARE);
      }
      else
       specialKeyWord(DECLARE,DECLARE,VARNAME);
  */
DEACTIVATE   : [dD] [eE] [aA] [cC] [tT] ([iI] [vV] [aA] [tT] [eE])?;
DECIMAL      : [dD] [eE] [cC] [iI] [mM] [aA] [lL] | [dD] [eE] [cC];
DEFAULT  : [dD] [eE] [fF] [aA] [uU] [lL] [tT] | [dD] [fF] [tT];	// specialKeyWord(DEFAULT,DEFAULT,VARNAME);
DELAY		: [dD] [eE] [lL] [aA] [yY];
DELETE		: [dD] [eE] [lL] [eE] [tT] [eE];
DEFINE		: [dD] [eE] [fF] [iI] [nN] [eE];
DEFINED	: [dD] [eE] [fF] ([iI] [nN] [eE] [dD])?;
DESCRIPTOR	: [dD] [eE] [sS] [cC] [rR] [iI] [pP] [tT] [oO] [rR];
DESCRIPTORS	: [dD] [eE] [sS] [cC] [rR] [iI] [pP] [tT] [oO] [rR] [sS];
DETACH		: [dD] [eE] [tT] [aA] [cC] [hH];
DIMENSION	: [dD] [iI] [mM] ([eE] [nN] [sS] [iI] [oO] [nN])?;
DIRECT		: [dD] [iI] [rR] [eE] [cC] [tT];
DISPLAY		: [dD] [iI] [sS] [pP] [lL] [aA] [yY];
DO	 	: [dD] [oO];
DOWNTHRU	: [dD] [oO] [wW] [nN] [tT] [hH] [rR] [uU];
E		: [eE];
EDIT	 	: [eE] [dD] [iI] [tT];
ELSE		: [eE] [lL] [sS] [eE];
END : [eE] [nN] [dD];
  /*		{ if(!ppCurrentContext->ppGatherTokens) lookahead=1;
	 enable lookahead. This will catch cases for named 
	   END where the name is for example a condition name, 
	   as in END finish;

		dupyy(END); END can be a preprocessor stmt
                }
   */
ENDFILE		: [eE] [nN] [dD] [fF] [iI] [lL] [eE];
ENDPAGE		: [eE] [nN] [dD] [pP] [aA] [gG] [eE];
ENTRY : [eE] [nN] [tT] [rR] [yY]; //		specialKeyWord(ENTRY,ENTRY,ENTRY);
ENVIRONMENT  : [eE] [nN] [vV] ([iI] [rR] [oO] [nN] [mM] [eE] [nN] [tT]);
ERROR           : [eE] [rR] [rR] [oO] [rR];
EVENT           : [eE] [vV] [eE] [nN] [tT];
EXCLUSIVE    : [eE] [xX] [cC] [lL] ([uU] [sS] [iI] [vV] [eE])?;
EXIT            : [eE] [xX] [iI] [tT];
EXPORTS         : [eE] [xX] [pP] [oO] [rR] [tT] [sS];
EXTERNAL     : [eE] [xX] [tT] ([eE] [rR] [nN] [aA] [lL])?;
F               : [fF];
FB              : [fF] [bB];
FS              : [fF] [sS];
FBS             : [fF] [bB] [sS];
FETCH           : [fF] [eE] [tT] [cC] [hH];
FETCHABLE       : [fF] [eE] [tT] [cC] [hH] [aA] [bB] [lL] [eE];
FILE_            : [fF] [iI] [lL] [eE];
FINISH          : [fF] [iI] [nN] [iI] [sS] [hH];
FIXED           : [fF] [iI] [xX] [eE] [dD];
FIXEDOVERFLOW  : [fF] [iI] [xX] [eE] [dD] [oO] [vV] [eE] [rR] [fF] [lL] [oO] [wW] | [fF] [oO] [fF] [lL];
FLOAT           : [fF] [lL] [oO] [aA] [tT];
FLUSH           : [fF] [lL] [uU] [sS] [hH];
FREE            : [fF] [rR] [eE] [eE];
FOREVER         : [fF] [oO] [rR] [eE] [vV] [eE] [rR];
FORTRAN         : [fF] [oO] [rR] [tT] [rR] [aA] [nN];
FORMAT	: [fF] [oO] [rR] [mM] [aA] [tT]; //	specialKeyWord(FORMAT,FORMAT_STMT,FORMAT);
FROM            : [fF] [rR] [oO] [mM];
FROMALIEN       : [fF] [rR] [oO] [mM] [aA] [lL] [iI] [eE] [nN];
G               : [gG];
GENERIC         : [gG] [eE] [nN] [eE] [rR] [iI] [cC];
GENKEY          : [gG] [eE] [nN] [kK] [eE] [yY];
GET             : [gG] [eE] [tT];
GO              : [gG] [oO];
GOTO            : [gG] [oO] [tT] [oO];
GRAPHIC         : [gG] [rR] [aA] [pP] [hH] [iI] [cC];
GX              : [gG] [xX];
HANDLE		: [hH] [aA] [nN] [dD] [lL] [eE];
HEXADEC		: [hH] [eE] [xX] [aA] [dD] [eE] [cC];
I               : [iI];
IEEE		: [iI] [eE] [eE] [eE];
IF              : [iI] [fF];
IGNORE          : [iI] [gG] [nN] [oO] [rR] [eE];
IMPORTED        : [iI] [mM] [pP] [oO] [rR] [tT] [eE] [dD];
IN              : [iI] [nN];
INCLUDE         : [iI] [nN] [cC] [lL] [uU] [dD] [eE];
INDEXAREA       : [iI] [nN] [dD] [eE] [xX] [aA] [rR] [eE] [aA];
INDEXED         : [iI] [nN] [dD] [eE] [xX] [eE] [dD];
INITIAL_      : [iI] [nN] [iI] [tT] [iI] [aA] [lL] | [iI] [nN] [iI] | [iI] [nN] [iI] [tT];
INLINE          : [iI] [nN] [lL] [iI] [nN] [eE];
INPUT           : [iI] [nN] [pP] [uU] [tT];
INTER           : [iI] [nN] [tT] [eE] [rR];
INTERACTIVE     : [iI] [nN] [tT] [eE] [rR] [aA] [cC] [tT] [iI] [vV] [eE];
INTERNAL     : [iI] [nN] [tT] ([eE] [rR] [nN] [aA] [lL])?;
INTO            : [iI] [nN] [tT] [oO];
INVALIDOP       : [iI] [nN] [vV] [aA] [lL] [iI] [dD] [oO] [pP];
IRREDUCIBLE  : [iI] [rR] [rR] [eE] [dD] ([uU] [cC] [iI] [bB] [lL] [eE])?;
ITERATE		: [iI] [tT] [eE] [rR] [aA] [tT] [eE];
KEY             : [kK] [eE] [yY];
KEYED           : [kK] [eE] [yY] [eE] [dD];
KEYFROM         : [kK] [eE] [yY] [fF] [rR] [oO] [mM];
KEYLENGTH       : [kK] [eE] [yY] [lL] [eE] [nN] [gG] [tT] [hH];
KEYLOC          : [kK] [eE] [yY] [lL] [oO] [cC];
KEYTO           : [kK] [eE] [yY] [tT] [oO];
LABEL           : [lL] [aA] [bB] [eE] [lL];
LEAVE           : [lL] [eE] [aA] [vV] [eE];
LIMITED         : [lL] [iI] [mM] [iI] [tT] [eE] [dD];
LIKE            : [lL] [iI] [kK] [eE];
LINE            : [lL] [iI] [nN] [eE];
LINESIZE        : [lL] [iI] [nN] [eE] [sS] [iI] [zZ] [eE];
LINKAGE         : [lL] [iI] [nN] [kK] [aA] [gG] [eE];
LIST            : [lL] [iI] [sS] [tT];
LITTLEENDIAN	: [lL] [iI] [tT] [tT] [lL] [eE] [eE] [nN] [dD] [iI] [aA] [nN];
LOCAL           : [lL] [oO] [cC] [aA] [lL];
LOCATE          : [lL] [oO] [cC] [aA] [tT] [eE];
LOOP            : [lL] [oO] [oO] [pP];
M               : [mM];
MAIN            : [mM] [aA] [iI] [nN];
NAME            : [nN] [aA] [mM] [eE];
NCP             : [nN] [cC] [pP];
NOCHARGRAPHIC : [nN] [oO] [cC] [hH] [aA] [rR] [gG] ([rR] [aA] [pP] [hH] [iI] [cC])?;
NOCHECK         : [nN] [oO] [cC] [hH] [eE] [cC] [kK];
NOCONVERSION : [nN] [oO] [cC] [oO] [nN] [vV] ([eE] [rR] [sS] [iI] [oO] [nN])?;
NODESCRIPTOR    : [nN] [oO] [dD] [eE] [sS] [cC] [rR] [iI] [pP] [tT] [oO] [rR];
NOEXECOPS       : [nN] [oO] [eE] [xX] [eE] [cC] [oO] [pP] [sS];
NOFIXEDOVERFLOW : [nN] [oO] [fF] [iI] [xX] [eE] [dD] [oO] [vV] [eE] [rR] [fF] [lL] [oO] [wW] [oO] [fF] [lL];
NOLOCK          : [nN] [oO] [lL] [oO] [cC] [kK];
NONASSIGNABLE : [nN] [oO] [nN] [aA] [sS] [sS] [iI] [gG] [nN] [aA] [bB] [lL] [eE] | [nN] [oO] [nN] [aA] [sS] [gG] [nN];
NONCONNECTED : [nN] [oO] [nN] [cC] [oO] [nN] [nN] ([eE] [cC] [tT] [eE] [dD])?;
NONE            : [nN] [oO] [nN] [eE];
NONVARYING	: [nN] [oO] [nN] [vV] [aA] [rR] ([yY] [iI] [nN] [gG])?;
NON_QUICK       : 'NON_QUICK';
NO_QUICK_BLOCKS	: 'NO_QUICK_BLOCKS';
NOINIT          : [nN] [oO] [iI] [nN] [iI] [tT];
NOINLINE        : [nN] [oO] [iI] [nN] [lL] [iI] [nN] [eE];
NOINVALIDOP     : [nN] [oO] [iI] [nN] [vV] [aA] [lL] [iI] [dD] [oO] [pP];
NOOVERFLOW : [nN] [oO] [oO] [vV] [eE] [rR] [fF] [lL] [oO] [wW] | [nN] [oO] [oO] [fF] [lL];
NOPRINT		: [nN] [oO] [pP] [rR] [iI] [nN] [tT];
NORMAL		: [nN] [oO] [rR] [mM] [aA] [lL];
NOSIZE          : [nN] [oO] [sS] [iI] [zZ] [eE];
NOSUBSCRIPTRANGE : [nN] [oO] [sS] [uU] [bB] [sS] [cC] [rR] [iI] [pP] [tT] [rR] [aA] [nN] [gG] [eE] | [nN] [oO] [sS] [uU] [bB] [rR] [gG];
NOSTRINGRANGE     : [nN] [oO] [sS] [tT] [rR] [iI] [nN] [gG] [rR] [aA] [nN] [gG] [eE] | [nN] [oO] [sS] [tT] [rR] [gG];
NOSTRINGSIZE      : [nN] [oO] [sS] [tT] [rR] [iI] [nN] [gG] [sS] [iI] [zZ] [eE] | [nN] [oO] [sS] [tT] [rR] [zZ];
NOTE      	: [nN] [oO] [tT] [eE];
NOUNDERFLOW      : [nN] [oO] [uU] [nN] [dD] [eE] [rR] [fF] [lL] [oO] [wW] | [nN] [oO] [uU] [fF] [lL];
NOWRITE               : [nN] [oO] [wW] [rR] [iI] [tT] [eE];
NOZERODIVIDE    : [nN] [oO] [zZ] [eE] [rR] [oO] [dD] [iI] [vV] [iI] [dD] [eE] | [nN] [oO] [zZ] [dD] [iI] [vV];
OFFSET          : [oO] [fF] [fF] [sS] [eE] [tT];
ON              : [oO] [nN];
OPEN            : [oO] [pP] [eE] [nN];
OPTIONAL        : [oO] [pP] [tT] [iI] [oO] [nN] [aA] [lL];
OPTIONS         : [oO] [pP] [tT] [iI] [oO] [nN] [sS];
OPTLINK         : [oO] [pP] [tT] [lL] [iI] [nN] [kK];
ORDER           : [oO] [rR] [dD] [eE] [rR];
ORDINAL         : [oO] [rR] [dD] [iI] [nN] [aA] [lL];
OTHERWISE	: [oO] [tT] [hH] [eE] [rR] ([wW] [iI] [sS] [eE])?; //specialKeyWord(OTHERWISE,OTHERWISE,VARNAME);
OUTPUT		: [oO] [uU] [tT] [pP] [uU] [tT];
OVERFLOW_	: [oO] [vV] [eE] [rR] [fF] [lL] [oO] [wW] | [oO] [fF] [lL];
P               : [pP];
PACKAGE         : [pP] [aA] [cC] [kK] [aA] [gG] [eE];
PACKED_DECIMAL  : 'PACKED_DECIMAL';
PACKED          : [pP] [aA] [cC] [kK] [eE] [dD];
PAGE            : [pP] [aA] [gG] [eE];
PAGESIZE        : [pP] [aA] [gG] [eE] [sS] [iI] [zZ] [eE];
PARAMETER   : [pP] [aA] [rR] [aA] [mM] [eE] [tT] [eE] [rR] | [pP] [aA] [rR] [mM];
PASSWORD	: [pP] [aA] [sS] [sS] [wW] [oO] [rR] [dD];
PENDING		: [pP] [eE] [nN] [dD] [iI] [nN] [gG];
PICTURE	: [pP] [iI] [cC] ([tT] [uU] [rR] [eE])?;
POINTER	: [pP] [oO] [iI] [nN] [tT] [eE] [rR] | [pP] [tT] [rR];
POSITION	: [pP] [oO] [sS] ([iI] [tT] [iI] [oO] [nN])?;
PRECISION	: [pP] [rR] [eE] [cC] ([iI] [sS] [iI] [oO] [nN])?;
PRINT	        : [pP] [rR] [iI] [nN] [tT];
PRIORITY        : [pP] [rR] [iI] [oO] [rR] [iI] [tT] [yY];
PROCEDURE	: [pP] [rR] [oO] [cC] ([eE] [dD] [uU] [rR] [eE])?; //specialKeyWord(PROCEDURE,PROCEDURE,VARNAME);
PUT             : [pP] [uU] [tT];
R               : [rR];
RANGE           : [rR] [aA] [nN] [gG] [eE];
READ            : [rR] [eE] [aA] [dD];
REAL            : [rR] [eE] [aA] [lL];
RECORD          : [rR] [eE] [cC] [oO] [rR] [dD];
RECSIZE         : [rR] [eE] [cC] [sS] [iI] [zZ] [eE];
RECURSIVE       : [rR] [eE] [cC] [uU] [rR] [sS] [iI] [vV] [eE];
REDUCIBLE	: [rR] [eE] [dD] ([uU] [cC] [iI] [bB] [lL] [eE])?;
REENTRANT       : [rR] [eE] [eE] [nN] [tT] [rR] [aA] [nN] [tT];
REFER           : [rR] [eE] [fF] [eE] [rR];
REGIONAL        : [rR] [eE] [gG] [iI] [oO] [nN] [aA] [lL];
RELEASE         : [rR] [eE] [lL] [eE] [aA] [sS] [eE];
RENAME          : [rR] [eE] [nN] [aA] [mM] [eE];
REORDER         : [rR] [eE] [oO] [rR] [dD] [eE] [rR];
REPEAT          : [rR] [eE] [pP] [eE] [aA] [tT];
REPLACE         : [rR] [eE] [pP] [lL] [aA] [cC] [eE];
REPLY		: [rR] [eE] [pP] [lL] [yY];
REREAD		: [rR] [eE] [rR] [eE] [aA] [dD];
RESERVED	: [rR] [eE] [sS] [eE] [rR] [vV] [eE] [dD];
RESERVES	: [rR] [eE] [sS] [eE] [rR] [vV] [eE] [sS];
RESIGNAL	: [rR] [eE] [sS] [iI] [gG] [nN] [aA] [lL];
RETCODE		: [rR] [eE] [tT] [cC] [oO] [dD] [eE];
RETURN		: [rR] [eE] [tT] [uU] [rR] [nN];
RETURNS		: [rR] [eE] [tT] [uU] [rR] [nN] [sS];
REUSE		: [rR] [eE] [uU] [sS] [eE];
REVERT		: [rR] [eE] [vV] [eE] [rR] [tT];
REWRITE		: [rR] [eE] [wW] [rR] [iI] [tT] [eE];
SCALARVARYING	: [sS] [cC] [aA] [lL] [aA] [rR] [vV] [aA] [rR] [yY] [iI] [nN] [gG];
SELECT		: [sS] [eE] [lL] [eE] [cC] [tT];
SEPARATE_STATIC	: 'SEPARATE_STATIC';
SET             : [sS] [eE] [tT];
SEQUENTIAL	: [sS] [eE] [qQ] [uU] [eE] [nN] [tT] [iI] [aA] [lL] | [sS] [eE] [qQ] [lL];
SIGNAL          : [sS] [iI] [gG] [nN] [aA] [lL];
SIGNED          : [sS] [iI] [gG] [nN] [eE] [dD];
SIS             : [sS] [iI] [sS];
SIZE            : [sS] [iI] [zZ] [eE];
SKIP_            : [sS] [kK] [iI] [pP];
SNAP	 : [sS] [nN] [aA] [pP]; //     	specialKeyWord(SNAP,SNAP,VARNAME);
STATIC		: [sS] [tT] [aA] [tT] [iI] [cC];
STDCALL		: [sS] [tT] [dD] [cC] [aA] [lL] [lL];
STORAGE		: [sS] [tT] [oO] [rR] [aA] [gG] [eE];
STOP		: [sS] [tT] [oO] [pP];
STREAM		: [sS] [tT] [rR] [eE] [aA] [mM];
STRING	 	: [sS] [tT] [rR] [iI] [nN] [gG];
STRINGRANGE        : [sS] [tT] [rR] [iI] [nN] [gG] [rR] [aA] [nN] [gG] [eE] | [sS] [tT] [rR] [gG];
STRINGSIZE		: [sS] [tT] [rR] [iI] [nN] [gG] [sS] [iI] [zZ] [eE] | [sS] [tT] [rR] [zZ];
STRINGVALUE	: [sS] [tT] [rR] [iI] [nN] [gG] [vV] [aA] [lL] [uU] [eE];
STRUCTURE	: [sS] [tT] [rR] [uU] [cC] [tT] [uU] [rR] [eE];
SUB             : [sS] [uU] [bB];
SUBSCRIPTRANGE	: [sS] [uU] [bB] [sS] [cC] [rR] [iI] [pP] [tT] [rR] [aA] [nN] [gG] [eE] | [sS] [uU] [bB] [rR] [gG];
SUPPORT		: [sS] [uU] [pP] [pP] [oO] [rR] [tT];
SYSTEM		: [sS] [yY] [sS] [tT] [eE] [mM];
TASK		: [tT] [aA] [sS] [kK];
THEN		: [tT] [hH] [eE] [nN];
THREAD		: [tT] [hH] [rR] [eE] [aA] [dD];
TITLE		: [tT] [iI] [tT] [lL] [eE];
TO              : [tT] [oO];
TOTAL           : [tT] [oO] [tT] [aA] [lL];
TP              : [tT] [pP];
TRANSIENT       : [tT] [rR] [aA] [nN] [sS] [iI] [eE] [nN] [tT];
TRANSMIT        : [tT] [rR] [aA] [nN] [sS] [mM] [iI] [tT];
TRKOFL          : [tT] [rR] [kK] [oO] [fF] [lL];
TSTACK          : [tT] [sS] [tT] [aA] [cC] [kK];
TYPE            : [tT] [yY] [pP] [eE];
U               : [uU];
UNALIGNED    : [uU] [nN] [aA] [lL] ([iI] [gG] [nN] [eE] [dD])?;
UNBUFFERED   : [uU] [nN] [bB] [uU] [fF] [fF] ([eE] [rR] [eE] [dD])?;
UNCONNECTED     : [uU] [nN] [cC] [oO] [nN] [nN] [eE] [cC] [tT] [eE] [dD];
UNDEFINEDFILE : [uU] [nN] [dD] [eE] [fF] [iI] [nN] [eE] [dD] [fF] [iI] [lL] [eE] | [uU] [nN] [dD] [fF];
UNDERFLOW_    : [uU] [nN] [dD] [eE] [rR] [fF] [lL] [oO] [wW] | [uU] [fF] [lL];
UNION           : [uU] [nN] [iI] [oO] [nN];
UNLOCK          : [uU] [nN] [lL] [oO] [cC] [kK];
UNSIGNED     : [uU] [nN] [sS] ([iI] [gG] [nN] [eE] [dD])?;
UNTIL           : [uU] [nN] [tT] [iI] [lL];
UPDATE          : [uU] [pP] [dD] [aA] [tT] [eE];
UPTHRU          : [uU] [pP] [tT] [hH] [rR] [uU];
V               : [vV];
VALIDATE        : [vV] [aA] [lL] [iI] [dD] [aA] [tT] [eE];
VALUE           : [vV] [aA] [lL] [uU] [eE];
VARIABLE        : [vV] [aA] [rR] [iI] [aA] [bB] [lL] [eE];
VARYING      : [vV] [aA] [rR] ([yY] [iI] [nN] [gG])?;
VARYINGZ     : [vV] [aA] [rR] ([yY] [iI] [nN] [gG])? [zZ] ;
VB              : [vV] [bB];
VBS             : [vV] [bB] [sS];
VS              : [vV] [sS];
VSAM            : [vV] [sS] [aA] [mM];
WAIT            : [wW] [aA] [iI] [tT];
WHEN            : [wW] [hH] [eE] [nN];
WIDECHAR     : [wW] ([iI] [dD] [eE])? [cC] [hH] [aA] [rR];
WINMAIN         : [wW] [iI] [nN] [mM] [aA] [iI] [nN];
WHILE           : [wW] [hH] [iI] [lL] [eE];
WRITE           : [wW] [rR] [iI] [tT] [eE];
WX              : [wW] [xX];
X               : [xX];
XN              : [xX] [nN];
XU              : [xX] [uU];
ZERODIVIDE : [zZ] [eE] [rR] [oO] [dD] [iI] [vV] [iI] [dD] [eE] | [zZ] [dD] [iI] [vV];

NUM : Nbr ;
fragment Nbr : [0-9] [0-9_]* ;
fragment Nbree : [DEFSQ] [+-]? Nbr;
STR_CONSTANT : '"' (~["\\])* '"' | '\'' (~['\\])* '\'' ;
NOT : '^' | '~';
AND : '&';
POWER: '**';
CONCAT : '||' | '!!';
NUMFLOAT :
	'.' Nbr Nbree
	| '.' Nbr
	| Nbr Nbree
	| Nbr '.'
	| Nbr '.' Nbree
	| Nbr '.' Nbr Nbree
	| Nbr '.' Nbr
	;
PTR : '->';
HANDLEPTR : '=>';
SELFOP : ('+' | '-' | '*' | '|' | '!' | '&') '=';
OR : '|' | '!';
LE : '^>' | '~>' | '<=';
GE : '^<' | '~<' | '>=';
NE : '<>' | '^=' | '~=';
VARNAME : (Chr | Let) (Chr | Let | [0-9])*;
fragment Chr : [_$#@]+;
fragment Let : [a-zA-Z]+;
COMMENT : '/*' .*? '*/' -> Skip;
WS : (' ' | '\t' | '\n' | '\r') -> Skip;
